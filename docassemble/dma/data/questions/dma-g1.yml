metadata:
  title: |
    DMA-G1
  short title: |
    Double Materiality Assessment (DMA)&#58; Identification of the actual and potential impacts, risks and opporunities related to business conduct (G1).
  show login: False
  description: |
    In this step, the undertaking identifies the actual and potential impacts, risks and opportunities (IROs) relating to business conduct across its own operations and in its upstream and downstream value chain. The outcome will be a ‘long’ list of impacts, risks and opportunities for further assessment and analysis in subsequent steps. If unsure, leave blank. 
  revision_date: 2024-09-13
---
modules:
  - .post
---
features:
  #css: sds.css # local CSS pointer ## goood tutorial for styling da: https://www.youtube.com/watch?v=6a3sER5MOK8
  popover trigger: hover # how to display interactive content/hyperlinks
  bootstrap theme: https://bootswatch.com/5/flatly/bootstrap.min.css
  navigation: True
  progress bar: True
  show progress bar percentage: True
  progressive: True
  inverse navbar: False
  hide navbar: True
  question help button: True
---
field: intro_screen
question: |
  Double Materiality Assessment (DMA)&#58; Identification of the actual and potential impacts, risks and opporunities related to business conduct (G1).
subquestion: |
  In this step, the undertaking identifies the actual and potential impacts, risks and opportunities (IROs) relating to business conduct across its own operations and in its upstream and downstream value chain. The outcome will be a ‘long’ list of impacts, risks and opportunities for further assessment and analysis in subsequent steps. If unsure, leave blank.

  To get started, press **Continue**.
help:
  label: Help?
  heading: <BR><h6>Explanation</h6>
  content: |
    &quot;ESRS G1 This Standard focusses on the following matters, collectively referred to in this Standard as ‘business conduct or business conduct matters’&#58;
    (a)
    business ethics and corporate culture, including anti-corruption and anti-bribery, the protection of whistleblowers, and animal welfare;
    (b)
    the management of relationships with suppliers, including payment practices, especially with regard to late payment to small and medium-sized undertakings.
    (c)
    activities and commitments of the undertaking related to exerting its political influence, including its lobbying activities.&quot;
---
mandatory: True
code: |
  multi_user = True
  guest_member = None

  # Get query params
  board_id = url_args.get("board_id", "")
  survey_id = url_args.get("survey_id", "")
  django_hostname = os.environ.get("DJANGOHOSTNAME")
  redirect_url = f"https://{django_hostname}/pages/{board_id}/{survey_id}/completed/?submitted=1"
  login_url = f"https://{django_hostname}/accounts/login/"

  token = url_args.get("token")

  intro_screen
  validate_status, validate_content = validate_session({"token": token, "board_id": board_id, "survey_id": survey_id})
  if validate_status != 200:
     invalid_token_screen
  else:
    session_info = json.loads(validate_content)
    guest_member = session_info.get("boardmember_id")
    if guest_member:
      redirect_url = "https://www.beyondcsrd.se"

  # Get more query params
  organisation_id = url_args.get("organisation", "")
  target_date = url_args.get("target_date")
  external_organisation = url_args.get("external_organisation")
  wekan_board = url_args.get("wekan_board")   # If wekan_board is set to None the list and swimlane info will be retrieved in the django backend
  list_id = url_args.get("list_id", "optional_default_list_id")
  swimlane_id = url_args.get("swimlane_id", "optional_default_swimlane_id")

  # This is needed so we can filter active interviews on board_id
  session_tags().add(board_id)
  session_tags().add(board_id+"__"+survey_id)
  session_tags().add(board_id+"__"+survey_id+"__"+organisation_id)

  survey_data = []
  survey_data.append({'name': 'Please disclose any negative impacts of the undertaking relating to business conduct.', 'value': DMA_G1_1, 'id': 'DMA_G1_1', 'answer_type': 'OPEN_LARGE'})
  survey_data.append({'name': 'Please disclose any positve impacts of the undertaking relating to business conduct.', 'value': DMA_G1_2, 'id': 'DMA_G1_2', 'answer_type': 'OPEN_LARGE'})
  survey_data.append({'name': 'Please disclose risks for the undertaking relating to business conduct.', 'value': DMA_G1_3, 'id': 'DMA_G1_3', 'answer_type': 'OPEN_LARGE'})
  survey_data.append({'name': 'Please disclose opportunities for the undertaking relating to business conduct.', 'value': DMA_G1_4, 'id': 'DMA_G1_4', 'answer_type': 'OPEN_LARGE'})
  survey_data.append({'name': 'Please share the undertaking&#x27;s potential additional impacts, risks, and opportunities relating to business conduct.', 'value': DMA_G1_5, 'id': 'DMA_G1_5', 'answer_type': 'OPEN_LARGE'})

  card_title = 'dma-g1'
  card_description = ''
  # Description section in the wekan board - need to be composed with markdown and be populated with datapartner_url from the intervfile_uploadsiew.
  card_title = f"{card_title}"
  card_description = f"{card_description}"
  
  email_title = 'dma-g1'
  #! Email compose for outgoing email.
  email_body = f"Dear Partner, <br> <br> This is an automated message to confirm we have recieved the form - {email_title}.  <br> <br> Best regards <br> reportAll Team."
  
  email_data = [
      {
          "subject": email_title,
          "body": email_body,
          "recipients": [],
          "from": "info@reportall.se",
      }
  ]

  survey_data_ids = [d['id'] for d in survey_data]
  survey_analytics = []
  survey_analytics.append({"id": "sc_id","name": "score_coverage", "values": [dyn_id for dyn_id in survey_data_ids if any([sa_id in dyn_id for sa_id in ['DMA_G1_1', 'DMA_G1_2', 'DMA_G1_3', 'DMA_G1_4']])]})
  survey_analytics.append({"id": "DMA_G1_F1", "name": "The text describes the negative impacts relating to business conduct.", "values": ["DMA_G1_1"], "labels": [""], "dtypes": ["OPEN_LARGE"]})
  survey_analytics.append({"id": "DMA_G1_F2", "name": "The text describes the positive impacts relating to business conduct.", "values": ["DMA_G1_2"], "labels": [""], "dtypes": ["OPEN_LARGE"]})
  survey_analytics.append({"id": "DMA_G1_F3", "name": "The text describes the risks relating to business conduct.", "values": ["DMA_G1_3"], "labels": [""], "dtypes": ["OPEN_LARGE"]})
  survey_analytics.append({"id": "DMA_G1_F4", "name": "The text describes the opportunities relating to business conduct.", "values": ["DMA_G1_4"], "labels": [""], "dtypes": ["OPEN_LARGE"]})
  survey_analytics.append({"id": "DMA_G1_F5", "name": "The text describes potential additional impacts relating to business conduct.", "values": ["DMA_G1_5"], "labels": [""], "dtypes": ["OPEN_LARGE"]})

  survey_analytics_dq = []
  for sa_idx, sa in enumerate(survey_analytics):
    if not all([_id in survey_data_ids for _id in sa["values"]]):
      sd_tag = []
      sd_found = []
      drop_sa_ids = []
      for sd in survey_data:
        for _id in sa["values"]:
          if _id in sd["id"]:
            sd_found.append(sd["id"])
            tag = sd.get("tag")
            if tag:
              sd_tag.append(tag)
            break
        if len(sd_found) == len(sa["values"]) and len(sd_found)>0:   # Found all sa values in survey_data
          dynamic_sa_dict = survey_analytics[sa_idx].copy()
          dynamic_sa_dict["id"] = dynamic_sa_dict["id"] + f"__DQ{sd_found[0].split('__DQ')[-1]}"
          dynamic_sa_dict["values"] = sd_found
          dynamic_sa_dict["tag"] = next(iter(set(sd_tag)), None)
          survey_analytics_dq.append(dynamic_sa_dict)
          drop_sa_ids.append(sa_idx)
          sd_found = []
          sd_tag = []
    else:
      survey_analytics_dq.append(sa)


  data = {
      "board_id": board_id,
      "survey_id": survey_id,
      "organisation_id": organisation_id,
      "external_organisation": external_organisation,
      "survey_data": survey_data,
      "survey_analytics": survey_analytics_dq,
      "survey_uploads": [],
      "max_responses": {"count": "1", "date_period": "year", "column_title": "Fiscal year"},
      "target_date": target_date,
      "wekan_board": wekan_board,
      "list_id": list_id,
      "swimlane_id": swimlane_id,
      "wekan_data": {
          "card_title": card_title,
          "card_description": card_description
  
      },
      # "email_data": email_data,
      "aux_data": [
      ],
      "guest_member": guest_member,
    }


  # send data to django
  final_screen
  reponse_status_code, response_content = store_interview_results(data)
  if reponse_status_code == 200:
    define('error_screen', False) 
    command('exit', url=redirect_url)
  else:
    error_screen
--- 
progress: 0
question: |
  Please disclose any negative impacts of the undertaking relating to business conduct. 
help:
  label: Help?
  heading: <BR><h6>Explanation</h6>
  content: |
    Business conduct includes the sub-topics corporate culture, protection of whistleblowers, animal welfare, political engagement, and management of relationships with suppliers including payment practices. Another sub-topic is corruption and bribery with the sub-sub-topics prevention and detection including training and incidents.
back button: True
fields:
  - no label: DMA_G1_1
    datatype: area
    required: false
--- 
progress: 20
question: |
  Please disclose any positve impacts of the undertaking relating to business conduct. 
back button: True
fields:
  - no label: DMA_G1_2
    datatype: area
    required: false
--- 
progress: 40
question: |
  Please disclose risks for the undertaking relating to business conduct. 
back button: True
fields:
  - no label: DMA_G1_3
    datatype: area
    required: false
--- 
progress: 60
question: |
  Please disclose opportunities for the undertaking relating to business conduct. 
back button: True
fields:
  - no label: DMA_G1_4
    datatype: area
    required: false
--- 
progress: 80
question: |
  Please share the undertaking&#x27;s potential additional impacts, risks, and opportunities relating to business conduct. 
back button: True
fields:
  - no label: DMA_G1_5
    datatype: area
    required: false
---
#! Response report before submission
progress: 100
field: final_screen
back button: True
question: |
  Congratulations!
subquestion: |
  All questions have been addressed. Press the submit button below to send in your answers.
continue button label: Submit answers!

---
#! Response report before submission
event: error_screen
prevent going back: True
question: |
  Something went wrong when submitting your answers. 
subquestion: |  
  Please try again or contact <a href="mailto:info@beyondcsrd.se">info@beyondcsrd.se</a> for help.
under: |
  Details: ${ response_content.decode() }
buttons:
  Exit: exit

---

event: require_login_screen
question: |
  Oops! You have been logged out. Please login again.
subquestion: |
  ${ action_button_html(login_url, size='md', color='primary', label='Login', new_window=False) }

---

event: invalid_token_screen
question: |
  Your survey token is invalid. Please contact the administrator to request a new url. 
subquestion: |
  ${ action_button_html(login_url, size='md', color='primary', label='Login', new_window=False) }

---